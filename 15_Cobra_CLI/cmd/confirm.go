package cmd

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
)

// confirmCmd represents the confirm command
var confirmCmd = &cobra.Command{
	Use:   "confirm",
	Short: "Exemplo de flags com op√ß√µes espec√≠ficas (yes/no, y/n)",
	Long: `Demonstra como criar flags com op√ß√µes espec√≠ficas e valores padr√£o.
	
Exemplos:
  course-cli confirm --yes                    # Usa valor padr√£o 'y'
  course-cli confirm --yes no                # For√ßa 'no'
  course-cli confirm --yes yes               # For√ßa 'yes'
  course-cli confirm --mode interactive      # Modo interativo
  course-cli confirm --mode batch            # Modo batch
  course-cli confirm --mode interactive --yes no  # Combina√ß√£o`,
	Run: func(cmd *cobra.Command, args []string) {
		// ==============================================================================
		// FLAGS COM OP√á√ïES ESPEC√çFICAS E VALORES PADR√ÉO
		// ==============================================================================

		// Flag com op√ß√µes yes/no, y/n - valor padr√£o 'y'
		yesFlag, _ := cmd.Flags().GetString("yes")

		// Flag com op√ß√µes espec√≠ficas (interactive/batch)
		mode, _ := cmd.Flags().GetString("mode")

		// Flag com op√ß√µes de prioridade (low/medium/high)
		priority, _ := cmd.Flags().GetString("priority")

		// Flag com op√ß√µes de ambiente (dev/staging/prod)
		environment, _ := cmd.Flags().GetString("environment")

		// Flag com op√ß√µes de formato (json/xml/yaml)
		format, _ := cmd.Flags().GetString("format")

		fmt.Println("üéØ Exemplo de Flags com Op√ß√µes Espec√≠ficas")
		fmt.Println("==========================================")

		// ==============================================================================
		// PROCESSAMENTO DA FLAG YES/NO
		// ==============================================================================

		fmt.Printf("üìã Confirma√ß√£o: ")
		switch strings.ToLower(yesFlag) {
		case "y", "yes":
			fmt.Println("‚úÖ SIM")
		case "n", "no":
			fmt.Println("‚ùå N√ÉO")
		default:
			fmt.Printf("‚ùì Valor inv√°lido: '%s' (use: y/n ou yes/no)\n", yesFlag)
			return
		}

		// ==============================================================================
		// PROCESSAMENTO DAS OUTRAS FLAGS
		// ==============================================================================

		fmt.Printf("üîÑ Modo: %s\n", mode)
		fmt.Printf("‚ö° Prioridade: %s\n", priority)
		fmt.Printf("üåç Ambiente: %s\n", environment)
		fmt.Printf("üìÑ Formato: %s\n", format)

		// ==============================================================================
		// VALIDA√á√ÉO DE COMBINA√á√ïES
		// ==============================================================================

		if mode == "batch" && yesFlag == "n" {
			fmt.Println("‚ö†Ô∏è  Aviso: Modo batch com confirma√ß√£o 'n√£o' pode causar problemas")
		}

		if environment == "prod" && priority == "low" {
			fmt.Println("‚ö†Ô∏è  Aviso: Ambiente de produ√ß√£o com prioridade baixa")
		}

		// ==============================================================================
		// SIMULA√á√ÉO DE A√á√ÉO BASEADA NAS FLAGS
		// ==============================================================================

		if strings.ToLower(yesFlag) == "y" || strings.ToLower(yesFlag) == "yes" {
			fmt.Println("\nüöÄ Executando a√ß√£o...")

			switch mode {
			case "interactive":
				fmt.Println("   üì± Modo interativo ativado")
			case "batch":
				fmt.Println("   ‚öôÔ∏è  Modo batch ativado")
			}

			fmt.Printf("   üìä Prioridade: %s\n", priority)
			fmt.Printf("   üåç Ambiente: %s\n", environment)
			fmt.Printf("   üìÑ Formato de sa√≠da: %s\n", format)

			fmt.Println("‚úÖ A√ß√£o executada com sucesso!")
		} else {
			fmt.Println("\n‚è∏Ô∏è  A√ß√£o cancelada pelo usu√°rio")
		}
	},
}

// validateFlag valida se um valor est√° em uma lista de valores v√°lidos
func validateFlag(value, flagName string, validValues []string, caseSensitive bool) error {
	for _, valid := range validValues {
		if caseSensitive && value == valid {
			return nil
		}
		if !caseSensitive && strings.EqualFold(value, valid) {
			return nil
		}
	}
	return fmt.Errorf("valor inv√°lido para --%s: '%s'. Use: %s", flagName, value, strings.Join(validValues, "/"))
}

// validateConfirmFlags valida todas as flags do comando confirm
func validateConfirmFlags(cmd *cobra.Command) error {
	yesFlag, _ := cmd.Flags().GetString("yes")
	if err := validateFlag(yesFlag, "yes", []string{"y", "n", "yes", "no"}, false); err != nil {
		return err
	}

	mode, _ := cmd.Flags().GetString("mode")
	if err := validateFlag(mode, "mode", []string{"interactive", "batch"}, true); err != nil {
		return err
	}

	priority, _ := cmd.Flags().GetString("priority")
	if err := validateFlag(priority, "priority", []string{"low", "medium", "high"}, true); err != nil {
		return err
	}

	environment, _ := cmd.Flags().GetString("environment")
	if err := validateFlag(environment, "environment", []string{"dev", "staging", "prod"}, true); err != nil {
		return err
	}

	format, _ := cmd.Flags().GetString("format")
	if err := validateFlag(format, "format", []string{"json", "xml", "yaml"}, true); err != nil {
		return err
	}

	return nil
}

func init() {
	rootCmd.AddCommand(confirmCmd)

	// ==============================================================================
	// FLAGS COM OP√á√ïES ESPEC√çFICAS E VALORES PADR√ÉO
	// ==============================================================================

	// Flag yes/no com valor padr√£o 'y' e valida√ß√£o
	confirmCmd.Flags().String("yes", "y", "Confirma√ß√£o (y/n ou yes/no) - padr√£o: y")

	// Flag com op√ß√µes espec√≠ficas - modo de opera√ß√£o
	confirmCmd.Flags().String("mode", "interactive", "Modo de opera√ß√£o (interactive/batch)")

	// Flag com op√ß√µes de prioridade
	confirmCmd.Flags().String("priority", "medium", "Prioridade da opera√ß√£o (low/medium/high)")

	// Flag com op√ß√µes de ambiente
	confirmCmd.Flags().String("environment", "dev", "Ambiente de execu√ß√£o (dev/staging/prod)")

	// Flag com op√ß√µes de formato
	confirmCmd.Flags().String("format", "json", "Formato de sa√≠da (json/xml/yaml)")

	// ==============================================================================
	// VALIDA√á√ÉO PERSONALIZADA
	// ==============================================================================

	// Adicionar valida√ß√£o customizada
	confirmCmd.PreRunE = func(cmd *cobra.Command, args []string) error {
		return validateConfirmFlags(cmd)
	}
}
