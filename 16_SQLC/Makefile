# ==============================================================================
# Vari√°veis
# ==============================================================================
DB_NAME=courses
DB_USER=root
DB_PASSWORD=root
DB_HOST=localhost
DB_PORT=3306
MIGRATIONS_PATH=sql/migrations
DATABASE_URL=mysql://$(DB_USER):$(DB_PASSWORD)@tcp($(DB_HOST):$(DB_PORT))/$(DB_NAME)

# Cores
BLUE=\033[0;34m
GREEN=\033[0;32m
RED=\033[0;31m
YELLOW=\033[0;33m
NC=\033[0m

# ==============================================================================
# Comandos de Desenvolvimento
# ==============================================================================
.PHONY: setup run test lint docs help

setup: ## Configura o ambiente
	@echo "$(BLUE)üîß Configurando ambiente...$(NC)"
	@go mod download
	@go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
	@go install -tags 'sqlite3' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
	@echo "$(GREEN)‚úÖ Ambiente configurado!$(NC)"

run: ## Roda a aplica√ß√£o
	@echo "$(BLUE)üöÄ Iniciando aplica√ß√£o...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Certifique-se de que o MySQL est√° rodando: make docker-up$(NC)"

test: ## Roda os testes
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	@go test -v ./...

lint: ## Executa o linter
	@echo "$(BLUE)üîç Verificando c√≥digo...$(NC)"
	@go vet ./...
	@go fmt ./...

docs: ## Gera documenta√ß√£o
	@echo "$(BLUE)üìö Gerando documenta√ß√£o...$(NC)"
	@echo "$(YELLOW)üìñ Documenta√ß√£o dispon√≠vel no README.md$(NC)"

# ==============================================================================
# Comandos Docker
# ==============================================================================
docker-up: ## Sobe o MySQL via Docker
	@echo "$(BLUE)üê≥ Iniciando MySQL...$(NC)"
	@docker compose up -d
	@echo "$(GREEN)‚úÖ MySQL rodando em localhost:3306$(NC)"

docker-down: ## Para o MySQL
	@echo "$(BLUE)üê≥ Parando MySQL...$(NC)"
	@docker compose down
	@echo "$(GREEN)‚úÖ MySQL parado$(NC)"

docker-logs: ## Mostra logs do MySQL
	@echo "$(BLUE)üìã Logs do MySQL:$(NC)"
	@docker compose logs mysql

docker-reset: ## Reseta dados do MySQL (CUIDADO!)
	@echo "$(RED)‚ö†Ô∏è  ATEN√á√ÉO: Isso vai apagar todos os dados!$(NC)"
	@docker compose down -v
	@docker compose up -d
	@echo "$(GREEN)‚úÖ Dados resetados$(NC)"

# ==============================================================================
# Comandos de Migra√ß√£o
# ==============================================================================
migrate-create: ## Cria nova migra√ß√£o
	@echo "$(BLUE)üìù Criando nova migra√ß√£o...$(NC)"
	@migrate create -ext=sql -dir=$(MIGRATIONS_PATH) -seq $(name)
	@echo "$(GREEN)‚úÖ Migra√ß√£o criada!$(NC)"

migrate-up: ## Aplica migra√ß√µes
	@echo "$(BLUE)‚¨ÜÔ∏è  Aplicando migra√ß√µes...$(NC)"
	@migrate -path=$(MIGRATIONS_PATH) -database="$(DATABASE_URL)" -verbose up
	@echo "$(GREEN)‚úÖ Migra√ß√µes aplicadas!$(NC)"

migrate-down: ## Reverte migra√ß√µes
	@echo "$(BLUE)‚¨áÔ∏è  Revertendo migra√ß√µes...$(NC)"
	@migrate -path=$(MIGRATIONS_PATH) -database="$(DATABASE_URL)" -verbose down
	@echo "$(GREEN)‚úÖ Migra√ß√µes revertidas!$(NC)"

migrate-status: ## Mostra status das migra√ß√µes
	@echo "$(BLUE)üìä Status das migra√ß√µes:$(NC)"
	@migrate -path=$(MIGRATIONS_PATH) -database="$(DATABASE_URL)" version

migrate-force: ## For√ßa vers√£o espec√≠fica da migra√ß√£o
	@echo "$(BLUE)üîß For√ßando vers√£o $(version)...$(NC)"
	@migrate -path=$(MIGRATIONS_PATH) -database="$(DATABASE_URL)" force $(version)

# ==============================================================================
# Comandos de Banco de Dados
# ==============================================================================
db-connect: ## Conecta ao MySQL
	@echo "$(BLUE)üîå Conectando ao MySQL...$(NC)"
	@docker compose exec mysql mysql -uroot -p$(DB_PASSWORD) $(DB_NAME)

db-tables: ## Lista tabelas do banco
	@echo "$(BLUE)üìã Tabelas do banco:$(NC)"
	@docker compose exec mysql mysql -uroot -p$(DB_PASSWORD) $(DB_NAME) -e "SHOW TABLES;"

db-describe: ## Descreve estrutura das tabelas
	@echo "$(BLUE)üìä Estrutura das tabelas:$(NC)"
	@docker compose exec mysql mysql -uroot -p$(DB_PASSWORD) $(DB_NAME) -e "DESCRIBE categories; DESCRIBE courses;"

db-seed: ## Insere dados de exemplo
	@echo "$(BLUE)üå± Inserindo dados de exemplo...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Implementar inser√ß√£o de dados de exemplo$(NC)"

# ==============================================================================
# Comandos SQLC
# ==============================================================================
sqlc-generate: ## Gera c√≥digo Go com SQLC
	@echo "$(BLUE)‚ö° Gerando c√≥digo Go...$(NC)"
	@sqlc generate
	@echo "$(GREEN)‚úÖ C√≥digo gerado!$(NC)"

sqlc-compile: ## Verifica queries SQL
	@echo "$(BLUE)üîç Verificando queries...$(NC)"
	@sqlc compile
	@echo "$(GREEN)‚úÖ Queries v√°lidas!$(NC)"

sqlc-doc: ## Gera documenta√ß√£o das queries
	@echo "$(BLUE)üìö Gerando documenta√ß√£o...$(NC)"
	@sqlc doc
	@echo "$(GREEN)‚úÖ Documenta√ß√£o gerada!$(NC)"

# ==============================================================================
# Comandos de Desenvolvimento Completo
# ==============================================================================
dev-setup: docker-up migrate-up ## Setup completo para desenvolvimento
	@echo "$(GREEN)üéâ Ambiente de desenvolvimento pronto!$(NC)"

dev-reset: docker-reset migrate-up ## Reset completo do ambiente
	@echo "$(GREEN)üîÑ Ambiente resetado e pronto!$(NC)"

# ==============================================================================
# Ajuda
# ==============================================================================
help: ## Mostra esta ajuda
	@echo "$(BLUE)Comandos dispon√≠veis:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

.DEFAULT_GOAL := help